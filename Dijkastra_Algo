package Dijikastra_algo;
import java.util.*;


import java.util.*;

class Graph {
    private int V;//Number of Vertices in the graph
    private List<Map<Integer, Integer>> adjacencyList;

    public Graph(int vertices) {
        V = vertices;
        adjacencyList = new ArrayList<>(vertices);
        for (int i = 0; i < vertices; i++) {
            adjacencyList.add(new HashMap<>());
        }
    }

    public void addEdge(int source, int destination, int weight) {
        adjacencyList.get(source).put(destination, weight);
        adjacencyList.get(destination).put(source, weight); // For undirected graph
    }

    public Map<Integer, Integer> dijkstra(int startVertex) {


        Map<Integer, Integer> distances = new HashMap<>();
        for (int i = 0; i < V; i++) {
            distances.put(i, Integer.MAX_VALUE);
        }

        distances.put(startVertex, 0);

        PriorityQueue<Map.Entry<Integer, Integer>> minHeap = new PriorityQueue<>(Map.Entry.comparingByValue());
        minHeap.add(new AbstractMap.SimpleEntry<>(startVertex, 0));

        while (!minHeap.isEmpty()) {
            Map.Entry<Integer, Integer> current = minHeap.poll();
            int currentVertex = current.getKey();

            for (Map.Entry<Integer, Integer> neighbor : adjacencyList.get(currentVertex).entrySet()) {
                int neighborVertex = neighbor.getKey();
                int edgeWeight = neighbor.getValue();
                int newDistance = distances.get(currentVertex) + edgeWeight;

                if (newDistance < distances.get(neighborVertex)) {
                    distances.put(neighborVertex, newDistance);
                    minHeap.add(new AbstractMap.SimpleEntry<>(neighborVertex, newDistance));
                }
            }
        }

        return distances;
    }

}

public class Dijkstras_algo {



    public static void main(String[] args) {
        int V = 7; // Number of vertices
        Graph graph = new Graph(V);

        // Adding edges with weights
        graph.addEdge(0, 1, 2);
        graph.addEdge(0, 2, 6);
        graph.addEdge(1, 3, 5);
        graph.addEdge(2, 3, 8);
        graph.addEdge(3, 5, 15);
        graph.addEdge(3, 4, 10);
        graph.addEdge(4, 5, 6);
        graph.addEdge(4, 6, 2);
        graph.addEdge(5, 6, 6);


        int startVertex = 0;
        Map<Integer, Integer> shortestDistances = graph.dijkstra(startVertex);

        System.out.println("Shortest distances from vertex " + startVertex + ":");
        for (Map.Entry<Integer, Integer> entry : shortestDistances.entrySet()) {
            System.out.println("To vertex " + entry.getKey() + ": " + entry.getValue());
        }
    }
}

